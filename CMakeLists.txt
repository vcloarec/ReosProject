# Reos licence GPL version 2
# Copyright (C) 2020 Vincent Cloarec (vcloarec at gmail dot com)

CMAKE_MINIMUM_REQUIRED(VERSION 3.9)

SET(CMAKE_AUTORCC ON)

if(DEFINED ENV{LEKAN_EXPERIMENTAL_VERSION})
    set(CPACK_PACKAGE_VERSION_MAJOR "2")
    set(CPACK_PACKAGE_VERSION_MINOR "2")
    set(CPACK_PACKAGE_VERSION_PATCH $ENV{LEKAN_EXPERIMENTAL_VERSION})
    ADD_DEFINITIONS(-DLEKAN_EXP)
else(DEFINED ENV{LEKAN_EXPERIMENTAL})
    set(CPACK_PACKAGE_VERSION_MAJOR "2")
    set(CPACK_PACKAGE_VERSION_MINOR "2")
    set(CPACK_PACKAGE_VERSION_PATCH "96")
endif(DEFINED ENV{LEKAN_EXPERIMENTAL})

ADD_DEFINITIONS(-DMAJ_VER_LEKAN="${CPACK_PACKAGE_VERSION_MAJOR}")
ADD_DEFINITIONS(-DMIN_VER_LEKAN="${CPACK_PACKAGE_VERSION_MINOR}")
ADD_DEFINITIONS(-DPAT_VER_LEKAN="${CPACK_PACKAGE_VERSION_PATCH}")

PROJECT(Reos)

SET(CMAKE_CXX_STANDARD 17)
IF(MSVC)
  SET(CMAKE_GENERATOR_PLATFORM x64)
ENDIF(MSVC)
SET(CMAKE_AUTOMOC ON)

# set path to additional CMake modules
SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})

# global vars
SET (REOS_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/output CACHE PATH "Output base directory")
SET (ENABLE_TESTS TRUE CACHE BOOL "Build tests?")
SET (ENABLE_HECRAS FALSE CACHE BOOL "Build tests?")

SET (REOS_PROVIDERS_DIR providers)
SET (REOS_ENGINES_DIR engines)
ADD_DEFINITIONS(-DREOS_PROVIDERS="${REOS_PROVIDERS_DIR}")
ADD_DEFINITIONS(-DREOS_SIMULATION_ENGINES="${REOS_ENGINES_DIR}")
ADD_DEFINITIONS(-DREOS_BUILDING_OUTPUT="${REOS_OUTPUT_DIRECTORY}")

SET(WITH_QTWEBKIT FALSE CACHE BOOL "With QtWebKit")
SET(QGIS_LIB_PATH CACHE PATH "Path to the library of QGIS")
SET(QGIS_INCLUDE_DIR CACHE PATH "Path to the include dir of QGIS")
SET(QGIS_CORE_LIB CACHE FILEPATH "Path to QGIS core lib")
SET(QGIS_GUI_LIB CACHE FILEPATH "Path to QGIS gui lib")
SET(QGIS_ANALYSIS_LIB CACHE FILEPATH "Path to QGIS analysis lib")
SET(QGIS_3D_LIB CACHE FILEPATH "Path to QGIS 3D lib")
SET(QGIS_3D_EXTRA_HEADER CACHE PATH "Path to QGIS 3D EXTRA HEADER lib")
SET(QGIS_APP_LIB CACHE FILEPATH "Path to QGIS app lib")
SET(QGIS_APP_INCLUDE CACHE PATH "Path to QGIS app header files (in source)")
SET(QGIS_LIBS ${QGIS_CORE_LIB} ${QGIS_GUI_LIB} ${QGIS_ANALYSIS_LIB} ${QGIS_3D_LIB})
SET(QSCISCINTILLA_INCLUDE_DIR CACHE PATH "Path to Qsciscintilla include dir")
SET(GMSH_INCLUDE_DIR CACHE PATH "Path to the include dir of gmsh")
SET(GMSH_LIB CACHE FILEPATH "Path to the lib file of gmsh")

SET(ENABLE_HEC_DSS TRUE CACHE BOOL "Enable hec-dss")
IF(ENABLE_HEC_DSS)
    SET (HEC_DSS_LIBS_PATH CACHE PATH "Path to the hec-dss libraries")
    SET (HEC_DSS_INCLUDE CACHE PATH "Path to the hec-dss include dir")
    IF(MSVC)
        SET(INTEL_FORTRAN_COMPILER_LIB_PATH CACHE PATH "C:\\Program Files (x86)\\Intel\\oneAPI\\compiler\\2022.2.0\\windows\\compiler\\lib\\intel64_win\\")
        SET(HEC_DSS_ALL_STATIC_LIB
        ${HEC_DSS_LIBS_PATH}/heclib_c.lib
        ${HEC_DSS_LIBS_PATH}/heclib_f.lib
        ${INTEL_FORTRAN_COMPILER_LIB_PATH}/ifconsol.lib
        ${INTEL_FORTRAN_COMPILER_LIB_PATH}/libifcoremt.lib
        ${INTEL_FORTRAN_COMPILER_LIB_PATH}/libifport.lib
        ${INTEL_FORTRAN_COMPILER_LIB_PATH}/libmmt.lib
        ${INTEL_FORTRAN_COMPILER_LIB_PATH}/libirc.lib
        ${INTEL_FORTRAN_COMPILER_LIB_PATH}/svml_dispmt.lib
        ${INTEL_FORTRAN_COMPILER_LIB_PATH}/ifmodintr.lib
        ${INTEL_FORTRAN_COMPILER_LIB_PATH}/ifwin.lib
    )
    ELSE()
        SET(HEC_DSS_ALL_STATIC_LIB
        ${HEC_DSS_LIBS_PATH}/heclib.a
        gfortran
        z
    )
    ENDIF(MSVC)
ENDIF(ENABLE_HEC_DSS)

SET(MDAL_INCLUDE_DIR CACHE PATH "Path to the include dir of MDAL")
SET(MDAL_LIB CACHE FILEPATH "Path to the lib file of MDAL")

FIND_PACKAGE(Qt5 COMPONENTS Core Gui Widgets Network Xml Svg Concurrent Test UiTools Sql REQUIRED)

# Password helper
find_package(QtKeychain REQUIRED)
# Master password hash and authentication encryption
FIND_PACKAGE(QCA REQUIRED)
# Check for runtime dependency of qca-ossl plugin
if(NOT MSVC)
  include(QCAMacros)
  FIND_QCAOSSL_PLUGIN_CPP(ENABLE_TESTS)
endif()

IF (WITH_QTWEBKIT)
  FIND_PACKAGE(Qt5 COMPONENTS WebKit WebKitWidgets REQUIRED)
ENDIF(WITH_QTWEBKIT)

SET(QWT_LIB CACHE FILEPATH "Path to qwt LIB")
SET(QWT_INCLUDE CACHE PATH "Path to qwt headers")

SET(COMEPHORE_TESTS_ENABLE FALSE CACHE BOOL "Enable tests for Comephore gridded rainfall, good files are necessary.")
SET(COMEPHORE_TESTS_FILES_PATH CACHE PATH "Path to the Comephore test files.")
IF (COMEPHORE_TESTS_ENABLE)
    ADD_DEFINITIONS(-DCOMEPHORE_FILES_PATH="${COMEPHORE_TESTS_FILES_PATH}")
ENDIF (COMEPHORE_TESTS_ENABLE)

ADD_SUBDIRECTORY(images)
ADD_SUBDIRECTORY(src/core)
ADD_SUBDIRECTORY(src/ui)
ADD_SUBDIRECTORY(src/gui)
ADD_SUBDIRECTORY(src/lekan)
ADD_SUBDIRECTORY(src/dataProviders)
ADD_SUBDIRECTORY(src/simulationEngines)
ADD_SUBDIRECTORY(i18n)

# testing
IF (ENABLE_TESTS)
  INCLUDE (CTest)
  ADD_DEFINITIONS(-DENABLE_TESTS)
  ENABLE_TESTING()
  ADD_SUBDIRECTORY(Tests)
ENDIF(ENABLE_TESTS)

