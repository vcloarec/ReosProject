!                   *************************
                    MODULE INTERFACE_PARALLEL
!                   *************************
!
!
!***********************************************************************
! PARALLEL VERSION 7.0                                  31/07/2012
!***********************************************************************
!
!brief    INTERFACES OF PARALLEL LIBRARY PUBLIC SUBROUTINES
!+
!
!history  J-M HERVOUET (LNHE)
!+        31/07/2012
!+        V6P2
!+   Original version.
!
!history  J-M HERVOUET (LNHE)
!+        09/05/2014
!+        V7P0
!+   Adding MPI communications by integers.
!
!history  R.NHEILI (Univerte de Perpignan, DALI)
!+        24/02/2016
!+        V7P3
!+      Adding compensation in the sum from the processors
!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
#if defined BOGUS
      ! So scan detect overloaded funtion
      CALL P_IMAX
      CALL P_DMAX
      CALL P_IMIN
      CALL P_DMIN
      CALL P_ISUM
      CALL P_DSUM
      CALL MPI_ADDRESS1
      CALL MPI_ADDRESS2
      CALL MPI_ADDRESS3
      CALL P_IMAX_ARRAY
      CALL P_DMAX_ARRAY
      CALL P_MPI_ALLTOALLV_I
      CALL P_MPI_ALLTOALLV_OIL
      CALL P_MPI_ALLTOALLV_ALG
      CALL P_MPI_ALLTOALLV_CHARAC
      CALL P_DREAD
      CALL P_IREAD
      CALL P_IREADI8
      CALL P_IREADI
      CALL P_DWRIT
      CALL P_IWRIT
      CALL P_IWRITI8
      CALL P_IWRITI
#endif
!
      INTERFACE
!
!-----------------------------------------------------------------------
!
!     DEFINITION OF INTERFACES
!
      SUBROUTINE P_INIT(CHAINE,NCAR,IPID,NCSIZE)
        USE DECLARATIONS_SPECIAL
        IMPLICIT NONE
        INTEGER, INTENT(OUT)            :: NCAR,IPID,NCSIZE
        CHARACTER(LEN=PATH_LEN), INTENT(OUT) :: CHAINE
      END SUBROUTINE
!
      SUBROUTINE P_EXIT
        IMPLICIT NONE
      END SUBROUTINE
!
      DOUBLE PRECISION FUNCTION P_DSUMERR(PARTIAL)
        IMPLICIT NONE
        DOUBLE PRECISION, INTENT(IN) :: PARTIAL(2)
      END FUNCTION
!
      SUBROUTINE P_DMIN_ARRAY(MYPART,N,VALUES)
        IMPLICIT NONE
        INTEGER, INTENT(IN) :: N
        DOUBLE PRECISION, INTENT(IN) :: MYPART(N)
        DOUBLE PRECISION, INTENT(IN) :: VALUES(N)
      END SUBROUTINE
!
      SUBROUTINE P_ISUM_ARRAY
     &(SEND_BUFFER, RECV_BUFFER, NCOUNT, IERR)
        IMPLICIT NONE
        INTEGER, INTENT(IN)  :: NCOUNT
        INTEGER, INTENT(IN)  :: SEND_BUFFER(NCOUNT)
        INTEGER, INTENT(OUT) :: RECV_BUFFER(NCOUNT)
        INTEGER, INTENT(OUT) :: IERR
      END SUBROUTINE
!
      SUBROUTINE P_MPI_ALLTOALL
     &(SEND_BUFFER,NSEND,SEND_DATYP,RECV_BUFFER,NRECV,RECV_DATYP,
     & IERR)
        IMPLICIT NONE
        INTEGER, INTENT(IN)  :: SEND_BUFFER(*),NSEND,SEND_DATYP,NRECV
        INTEGER, INTENT(IN)  :: RECV_DATYP
        INTEGER, INTENT(OUT) :: RECV_BUFFER(*),IERR
      END SUBROUTINE
!
      SUBROUTINE P_WAIT_PARACO(IBUF,NB)
        IMPLICIT NONE
        INTEGER,INTENT(INOUT) :: IBUF(*)
        INTEGER,INTENT(IN)    :: NB
      END SUBROUTINE
!
      SUBROUTINE P_ALLGATHERV_I
     &(SEND_BUFFER, SEND_COUNT, RECV_BUFFER,
     & RECV_COUNT, DISPLS, IERR)
        IMPLICIT NONE
        INTEGER, INTENT(IN)    :: SEND_BUFFER(*)
        INTEGER, INTENT(IN)    :: SEND_COUNT
        INTEGER, INTENT(INOUT)   :: RECV_BUFFER(*)
        INTEGER, INTENT(IN)    :: RECV_COUNT(*)
        INTEGER, INTENT(IN)    :: DISPLS(*)
        INTEGER, INTENT(OUT)   :: IERR
      END SUBROUTINE
!
      REAL(KIND=R8) FUNCTION P_TIME()
        USE DECLARATIONS_SPECIAL
        IMPLICIT NONE
      END FUNCTION
!
      SUBROUTINE P_SYNC
        IMPLICIT NONE
      END SUBROUTINE
!
      SUBROUTINE P_MPI_TYPE_CREATE_STRUCT
     &(NBLOCK,NELEM,DISPL,ELEM_TYPE,NEW_DATATYPE,IERR)
        USE DECLARATIONS_PARALLEL
        IMPLICIT NONE
        INTEGER, INTENT(IN)                           :: NBLOCK
        INTEGER, INTENT(OUT)                          :: IERR
        INTEGER, INTENT(OUT)                          :: NEW_DATATYPE
        INTEGER, INTENT(IN)                           :: NELEM(NBLOCK)
        INTEGER, INTENT(IN)                         :: ELEM_TYPE(NBLOCK)
        INTEGER(KIND=MY_ADDRESS_KIND), INTENT(INOUT) :: DISPL(NBLOCK)
      END SUBROUTINE
!
      SUBROUTINE P_MPI_TYPE_COMMIT(DATA_TYPE,IERR)
        IMPLICIT NONE
        INTEGER, INTENT(INOUT)  :: DATA_TYPE
        INTEGER, INTENT(OUT) :: IERR
      END SUBROUTINE
!
      SUBROUTINE P_MPI_TYPE_FREE(DATA_TYPE,IERR)
        IMPLICIT NONE
        INTEGER, INTENT(INOUT)  :: DATA_TYPE
        INTEGER, INTENT(OUT) :: IERR
      END SUBROUTINE
!
      SUBROUTINE ORG_CHARAC_TYPE_OIL
     &(OIL_CHARAC)
        IMPLICIT NONE
        INTEGER, INTENT(INOUT) :: OIL_CHARAC
      END SUBROUTINE
!
      SUBROUTINE ORG_CHARAC_TYPE_ALG
     &(ALG_CHAR,NOMB)
        IMPLICIT NONE
        INTEGER, INTENT(INOUT) :: ALG_CHAR
        INTEGER, INTENT(IN)    :: NOMB
      END SUBROUTINE
!
      SUBROUTINE ORG_CHARAC_TYPE1(NOMB,CHARACTERISTIC)
        IMPLICIT NONE
        INTEGER, INTENT(IN)    :: NOMB
        INTEGER, INTENT(INOUT) :: CHARACTERISTIC
      END SUBROUTINE
!
      SUBROUTINE P_MPI_TYPE_GET_EXTENT
     &(DATATYPE,LOWER_BOUND,EXTENT,IERR)
        USE DECLARATIONS_PARALLEL
        IMPLICIT NONE
        INTEGER(KIND=MY_ADDRESS_KIND), INTENT(INOUT)::
     &                                           LOWER_BOUND,EXTENT
        INTEGER, INTENT(IN)                   :: DATATYPE
        INTEGER, INTENT(OUT)                  :: IERR
      END SUBROUTINE
      !
      ! Unused functions
      !
      SUBROUTINE P_LSUM(IARG1,LARG2)
        IMPLICIT NONE
        INTEGER, INTENT(IN) :: IARG1
        LOGICAL, DIMENSION(IARG1), INTENT(INOUT) :: LARG2
      END SUBROUTINE
!
      SUBROUTINE P_MAIL(CHAINE,NCAR)
        USE DECLARATIONS_SPECIAL
        IMPLICIT NONE
        INTEGER, INTENT(IN)               :: NCAR
        CHARACTER(LEN=PATH_LEN), INTENT(INOUT) :: CHAINE
      END SUBROUTINE
!
!
!------------------------------------------------------------------------
!
      END INTERFACE

      INTERFACE P_MAX
        DOUBLE PRECISION FUNCTION P_DMAX(MYPART)
          IMPLICIT NONE
          DOUBLE PRECISION, INTENT(IN) :: MYPART
        END FUNCTION
!
        INTEGER FUNCTION P_IMAX(MYPART)
          IMPLICIT NONE
          INTEGER, INTENT(IN) :: MYPART
        END FUNCTION
      END INTERFACE

!
      INTERFACE P_MAX_ARRAY
        SUBROUTINE P_DMAX_ARRAY(MYPART,N,VALUES)
          IMPLICIT NONE
          INTEGER, INTENT(IN) :: N
          DOUBLE PRECISION, INTENT(IN) :: MYPART(N)
          DOUBLE PRECISION, INTENT(IN) :: VALUES(N)
        END SUBROUTINE
!
        SUBROUTINE P_IMAX_ARRAY
     &  (SEND_BUFFER, RECV_BUFFER, NCOUNT, IERR)
          IMPLICIT NONE
          INTEGER, INTENT(IN)  :: NCOUNT
          INTEGER, INTENT(IN)  :: SEND_BUFFER(NCOUNT)
          INTEGER, INTENT(OUT) :: RECV_BUFFER(NCOUNT)
          INTEGER, INTENT(OUT) :: IERR
        END SUBROUTINE
      END INTERFACE

      INTERFACE P_MIN
        DOUBLE PRECISION FUNCTION P_DMIN(MYPART)
          IMPLICIT NONE
          DOUBLE PRECISION, INTENT(IN) :: MYPART
        END FUNCTION
!
        INTEGER FUNCTION P_IMIN(MYPART)
          IMPLICIT NONE
          INTEGER, INTENT(IN) :: MYPART
        END FUNCTION
      END INTERFACE

      INTERFACE P_SUM
        DOUBLE PRECISION FUNCTION P_DSUM(MYPART)
          IMPLICIT NONE
          DOUBLE PRECISION, INTENT(IN) :: MYPART
        END FUNCTION
!
        INTEGER FUNCTION P_ISUM(MYPART)
          IMPLICIT NONE
          INTEGER, INTENT(IN) :: MYPART
        END FUNCTION
      END INTERFACE

      INTERFACE P_MPI_ADDRESS
        SUBROUTINE P_MPI_ADDRESS
     &  (LOCATION,ADDRESS,IER)
          USE DECLARATIONS_PARALLEL
          IMPLICIT NONE
          INTEGER, INTENT(IN)                    :: LOCATION
          INTEGER, INTENT(OUT)                   :: IER
          INTEGER(KIND=MY_ADDRESS_KIND), INTENT(OUT) :: ADDRESS
        END SUBROUTINE
!
        SUBROUTINE P_MPI_ADDRESS2
     &  (LOCATION,ADDRESS,IER)
          USE DECLARATIONS_PARALLEL
          IMPLICIT NONE
          DOUBLE PRECISION, INTENT(IN)            :: LOCATION
          INTEGER, INTENT(OUT)                    :: IER
          INTEGER (KIND=MY_ADDRESS_KIND), INTENT(OUT) :: ADDRESS
        END SUBROUTINE
!
        SUBROUTINE P_MPI_ADDRESS3
     &  (LOCATION,ADDRESS,IER)
          USE DECLARATIONS_PARALLEL
          IMPLICIT NONE
          DOUBLE PRECISION, INTENT(IN)            :: LOCATION(*)
          INTEGER, INTENT(OUT)                    :: IER
          INTEGER (KIND=MY_ADDRESS_KIND), INTENT(OUT) :: ADDRESS
        END SUBROUTINE
      END INTERFACE

      INTERFACE P_MPI_ALLTOALLV
        SUBROUTINE P_MPI_ALLTOALLV_CHARAC
     &  (SEND_BUFFER,NSEND,SEND_DISPL,SEND_DATYP,RECV_BUFFER,NRECV,
     &   RECV_DISPL,RECV_DATYP,IERR)
          USE DECLARATIONS_PARALLEL
          IMPLICIT NONE
          INTEGER, INTENT(IN)  :: NSEND(*),SEND_DISPL(*),
     &                            SEND_DATYP,NRECV(*)
          INTEGER, INTENT(IN)  :: RECV_DISPL(*),RECV_DATYP
          INTEGER, INTENT(OUT) :: IERR
          TYPE(CHARAC_TYPE), INTENT(IN)  :: SEND_BUFFER(*)
          TYPE(CHARAC_TYPE), INTENT(INOUT) :: RECV_BUFFER(*)
        END SUBROUTINE
!
        SUBROUTINE P_MPI_ALLTOALLV_ALG
     &  (SEND_BUFFER,NSEND,SEND_DISPL,SEND_DATYP,RECV_BUFFER,NRECV,
     &   RECV_DISPL,RECV_DATYP,IERR)
        USE DECLARATIONS_PARALLEL
        IMPLICIT NONE
        INTEGER, INTENT(IN)  :: NSEND(*),SEND_DISPL(*)
        INTEGER, INTENT(IN)  :: SEND_DATYP,NRECV(*)
        INTEGER, INTENT(IN)  :: RECV_DISPL(*),RECV_DATYP
        INTEGER, INTENT(OUT) :: IERR
        TYPE(ALG_TYPE), INTENT(IN)  :: SEND_BUFFER(*)
        TYPE(ALG_TYPE), INTENT(INOUT) :: RECV_BUFFER(*)
        END SUBROUTINE
!
        SUBROUTINE P_MPI_ALLTOALLV_I
     &  (SEND_BUFFER,NSEND,SEND_DISPL,SEND_DATYP,RECV_BUFFER,NRECV,
     &   RECV_DISPL,RECV_DATYP,IERR)
          IMPLICIT NONE
          INTEGER, INTENT(IN)  :: SEND_BUFFER(*),NSEND(*),SEND_DISPL(*)
          INTEGER, INTENT(IN)  :: SEND_DATYP,NRECV(*),RECV_DISPL(*)
          INTEGER, INTENT(IN)  :: RECV_DATYP
          INTEGER, INTENT(OUT) :: RECV_BUFFER(*),IERR
        END SUBROUTINE

        SUBROUTINE P_MPI_ALLTOALLV_OIL
     &  (SEND_BUFFER,NSEND,SEND_DISPL,SEND_DATYP,RECV_BUFFER,NRECV,
     &   RECV_DISPL,RECV_DATYP,IERR)
          USE DECLARATIONS_PARALLEL
          IMPLICIT NONE
          INTEGER, INTENT(IN)  :: NSEND(*),SEND_DISPL(*),SEND_DATYP,
     &                            NRECV(*)
          INTEGER, INTENT(IN)  :: RECV_DISPL(*),RECV_DATYP
          INTEGER, INTENT(OUT) :: IERR
          TYPE(OIL_TYPE), INTENT(IN)  :: SEND_BUFFER(*)
          TYPE(OIL_TYPE), INTENT(INOUT) :: RECV_BUFFER(*)
        END SUBROUTINE
!
      END INTERFACE

      INTERFACE P_READ
        SUBROUTINE P_IREAD(BUFFER,N,BYTES,SOURCE,DATATYPE,IREQ)
          IMPLICIT NONE
          INTEGER, INTENT(IN)    :: N,BYTES,SOURCE,DATATYPE
          INTEGER, INTENT(INOUT) :: IREQ
          DOUBLE PRECISION, INTENT(INOUT) :: BUFFER(*)
        END SUBROUTINE
!
        SUBROUTINE P_IREADI(BUFFER,NVAL,SOURCE,ITAG,IREQ)
          IMPLICIT NONE
          INTEGER, INTENT(IN)    :: NVAL,SOURCE,ITAG
          INTEGER, INTENT(INOUT) :: IREQ
          INTEGER, INTENT(OUT) :: BUFFER(NVAL)
        END SUBROUTINE
!
        SUBROUTINE P_IREADI8(BUFFER,NVAL,SOURCE,ITAG,IREQ)
          USE DECLARATIONS_SPECIAL
          IMPLICIT NONE
          INTEGER, INTENT(IN)    :: NVAL,SOURCE,ITAG
          INTEGER, INTENT(INOUT) :: IREQ
          INTEGER(KIND=K8), INTENT(OUT) :: BUFFER(NVAL)
        END SUBROUTINE
!
        SUBROUTINE P_DREAD(BUFFER,N,BYTES,SOURCE,DATATYPE)
          IMPLICIT NONE
          INTEGER, INTENT(IN) :: N,BYTES,SOURCE,DATATYPE
          DOUBLE PRECISION, INTENT(INOUT) :: BUFFER(*)
        END SUBROUTINE
      END INTERFACE

      INTERFACE P_WRITE

        SUBROUTINE P_IWRIT(BUFFER,N,BYTES,DEST,ITAG,IREQ)
          IMPLICIT NONE
          INTEGER, INTENT(IN)    :: N,BYTES,DEST,ITAG
          INTEGER, INTENT(INOUT) :: IREQ
          DOUBLE PRECISION, INTENT(INOUT) :: BUFFER(*)
        END SUBROUTINE
!
        SUBROUTINE P_IWRITI(BUFFER,NVAL,DEST,ITAG,IREQ)
          IMPLICIT NONE
          INTEGER, INTENT(IN)    :: NVAL,DEST,ITAG
          INTEGER, INTENT(INOUT) :: IREQ
          INTEGER, INTENT(IN) :: BUFFER(NVAL)
        END SUBROUTINE
!
        SUBROUTINE P_IWRITI8(BUFFER,NVAL,DEST,ITAG,IREQ)
          USE DECLARATIONS_SPECIAL
          IMPLICIT NONE
          INTEGER, INTENT(IN)    :: NVAL,DEST,ITAG
          INTEGER, INTENT(INOUT) :: IREQ
          INTEGER(KIND=K8), INTENT(IN) :: BUFFER(NVAL)
        END SUBROUTINE
!
        SUBROUTINE P_DWRIT(BUFFER,N,BYTES,DEST,TYPE)
          IMPLICIT NONE
          INTEGER, INTENT(IN)          :: N,BYTES,DEST,TYPE
          DOUBLE PRECISION, INTENT(IN) :: BUFFER(*)
        END SUBROUTINE
!
      END INTERFACE
!
!=======================================================================
!
      END MODULE INTERFACE_PARALLEL
