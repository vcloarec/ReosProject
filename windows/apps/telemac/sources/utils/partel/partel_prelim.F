!                   *********************
                    PROGRAM PARTEL_PRELIM
!                   *********************
!
!***********************************************************************
! PARALLEL   V6P2                                   20/02/2012
!***********************************************************************
!
!BRIEF    PREPROCESSING STEP BEFORE A PARALLEL COMPUTATION
!HISTORY   R. KOPMANN (BAW)
!+
!+
!+         FIRST  VERSION JANUARY-MARCH 2000
!
!HISTORY   JAJ
!+      12/12/2000
!+      SECOND VERSION PINXIT
!+     PARTITIONING OF GEOMETRY AND 2D RESULT FILES POSSIBLE

!HISTORY   JAJ
!+      22/02/2002
!+      THIRD VERSION
!+     ERRORS IN BC VALUES IN DECOMPOSED BC FILES REMOVED
!+     ERRONEOUS TREATMENT OF ISLANDS DEBUGGED
!
!HISTORY   J-M HERVOUET ; JAJ
!+      17/04/2002
!+     FOURTH VERSION
!+     PARTITIONING FOR 3D RESULT FILES DONE BY JMH
!+     INCLUDING BOTH PARTITIONING METHODS AND BEAUTIFYING BY JAJ
!
!HISTORY  J-M HERVOUET
!+     21/01/2003
!+     FIFTH VERSION
!+     CORRECTED A WRONG DIMENSION OF THE ARRAY CUT, AN ERROR
!+     OCCURING BY A LARGER NUMBER OF PROCESSORS
!
!HISTORY  JAJ; MATTHIEU GONZALES DE LINARES
!+        27/01/2003
!+        SIXTH VERSION
!+    CORRECTED A WRONG DIMENSION OF THE ARRAY ALLVAR
!
!HISTORY  J-M HERVOUET
!+       12/03/2003
!+      SEVENTH VERSION
!+      ALGORITHM CHANGED : A SEGMENT IS IN A SUBDOMAIN IF IT BELONGS
!+      TO AN ELEMENT IN THE SUBDOMAIN NOT IF THE 2 POINTS OF THE
!+      SEGMENT BELONG TO THE SUBDOMAIN.
!+       SPECIFIC ELEBD INCLUDED, ALL REFERENCE TO MPI OR BIEF REMOVED
!
!HISTORY  J-M HERVOUET
!+        01/09/2003
!+      EIGHTH VERSION
!+      UBOR AND VBOR INVERTED LINE 613 WHEN READING THE CLI FILE.
!
!HISTORY   C. MOULINEC, P. VEZOLLE, O. BOITEAU
!+
!+      NEXT VERSION
!+      SOME CHANGES
!
!HISTORY   C. DENIS (EDF-SINETICS)
!+        31/05/2010
!+      V6P2
!+      FURTHER DEVELOPPED IN ORDER TO DECREASE THE AMOOUT OF MEMORY
!
!HISTORY  N.DURAND (HRW), S.E.BOURBAN (HRW)
!+        21/02/2012
!+        V6P2
!+   CREATION OF DOXYGEN TAGS FOR AUTOMATED DOCUMENTATION AND
!+   CROSS-REFERENCING OF THE FORTRAN SOURCES
!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
      USE DECLARATIONS_SPECIAL
      IMPLICIT NONE
!
!   MAXIMUM GEOMETRICAL MULTIPLICITY OF A NODE (VARIABLE AUSSI
!   PRESENTE DANS LA BIEF, NE PAS CHANGER L'UNE SANS L'AUTRE)
      INTEGER, PARAMETER :: NBMAXNSHARE =  10
!
      INTEGER, PARAMETER :: MAXNPROC = 100000 ! MAX PARTITION NUMBER [00000..99999]
      INTEGER, PARAMETER :: MAXADDCH = 10 ! MAX ADDED SUFFIX LENGTH
      INTEGER, PARAMETER :: MAXVAR = 100  ! MAX NUMBER OF VARIABLES
      INTEGER, PARAMETER :: MAXALLVARLENGTH = 3200 ! MAXVAR*32 FOR ALLVAR
!
      INTEGER NVAR, NPLAN
      INTEGER NELEM, NPOIN, NDP, NELEM2, NPOIN2, NDUM
      INTEGER IB(10)
!
      INTEGER, ALLOCATABLE :: IKLES(:)
      INTEGER, ALLOCATABLE :: IKLES3D(:)
      INTEGER, ALLOCATABLE :: IRAND(:)
!
      REAL, ALLOCATABLE    :: F(:,:)
!
      REAL TIMES
!
      INTEGER :: NINP=10
      INTEGER TIME(3), DATE(3)
!
      CHARACTER(LEN=80)  :: TITLE
      CHARACTER(LEN=32)  :: VARI
      CHARACTER(LEN=PATH_LEN)  :: NAMEINP
!
      INTEGER I, J, K, ERR
      INTEGER ISTOP, ISTART, ILOOP
      INTEGER I_LEN, I_S, I_SP, I_LENINP
!
      LOGICAL IS
!
!   METISOLOGY
!
      INTEGER NPARTS
      INTEGER, ALLOCATABLE :: EPART(:), NPART(:)
!
!----------------------------------------------------------------------
!
      LNG=2 ! JE NE PARLE FRANCAIS, JE SUIS BARBARIEN
      LU=6  ! FORTRAN STANDARD OUPUT CHANNEL
!
! INTRODUCE YOURSELF
!
!      IF (ID .EQ. 0) THEN
!       WRITE(LU,*) ' '
!       WRITE(LU,*) '+-------------------------------------------------+'
!       WRITE(LU,*) '  PRELIMINARY TASK FOR PARTEL                    '
!       WRITE(LU,*) '  PARALLEL VERSION DEVELOPPED BY                   '
!       WRITE(LU,*) '  CHRISTOPHE DENIS  (SINETICS)'
!       WRITE(LU,*) '  PARTEL (C) COPYRIGHT 2000-2002 '
!       WRITE(LU,*) '  BUNDESANSTALT FUER WASSERBAU, KARLSRUHE'
!       WRITE(LU,*) ' '
!       WRITE(LU,*) '  METIS 4.0.1 (C) COPYRIGHT 1998 '
!       WRITE(LU,*) '  REGENTS OF THE UNIVERSITY OF MINNESOTA '
!       WRITE(LU,*) ' '
!       WRITE(LU,*) '  BIEF 5.9 (C) COPYRIGHT 2010 EDF'
!       WRITE(LU,*) '+-------------------------------------------------+'
!       WRITE(LU,*) '    LUN MAI 31 17:21:20 CEST 2010               '
!       WRITE(LU,*) ' '
!       WRITE(LU,*) '+-----------------------------------------------+'
!      END IF
!
!----------------------------------------------------------------------
! NAMES OF THE INPUT FILES:
      INQUIRE (FILE='RESULT_SEQ_METIS',EXIST=IS)
      IF (IS) THEN
        CALL PLANTE(0)
        STOP
      END IF
      OPEN(UNIT=72,FILE='PARTEL.PAR')
      READ(72,*) NAMEINP
      READ(72,*)
      READ(72,*) NPARTS
      READ(72,*)
      CLOSE(72)
!
      INQUIRE (FILE=NAMEINP,EXIST=IS)
      IF (.NOT.IS) THEN
        WRITE (LU,'('' FILE DOES NOT EXIST: '',A30)') NAMEINP
        CALL PLANTE(1)
        STOP
      END IF
!
      I_S  = LEN(NAMEINP)
      I_SP = I_S + 1
      DO I=1,I_S
        IF (NAMEINP(I_SP-I:I_SP-I) .NE. ' ') EXIT
      ENDDO
      I_LEN=I_SP - I
      I_LENINP = I_LEN
!
      IF (I_LENINP > PATH_LEN) THEN
        WRITE(LU,*) ' '
        WRITE(LU,*) 'ATTENTION:'
        WRITE(LU,*) 'THE NAME OF THE INPUT FILE:'
        WRITE(LU,*) NAMEINP
        WRITE(LU,*) 'IS LONGER THAN ',PATH_LEN,' CHARACTERS'
        WRITE(LU,*) 'WHICH IS THE LONGEST APPLICABLE NAME FOR TELEMAC '
        WRITE(LU,*) 'INPUT AND OUTPUT FILES. STOPPED. '
        CALL PLANTE(1)
        STOP
      ENDIF
!
      OPEN(NINP,FILE=NAMEINP,STATUS='OLD',FORM='UNFORMATTED')
      REWIND NINP
!
      READ (NINP) TITLE
      READ (NINP) I, J
      NVAR = I + J
      ISTART = 42
      DO I=1,NVAR
        READ(NINP) VARI
        DO J=1,32
          IF(VARI(J:J).EQ.' ') VARI(J:J) = '-'
        END DO
        ISTOP = ISTART+20
        IF (ISTOP.GT.MAXALLVARLENGTH) THEN
          WRITE(LU,*) 'VARIABLE NAMES TOO LONG FOR STRIN ALLVAR'
          WRITE(LU,*) 'STOPPED.'
          CALL PLANTE(1)
          STOP
        ENDIF
        ISTART=ISTOP+1
      ENDDO
!
!  READ THE REST OF THE SELAFIN FILE
!  10 INTEGERS, THE FIRST IS THE NUMBER OF RECORDS (TIMESTEPS)
!
      READ (NINP) (IB(I), I=1,10)
      IF (IB(8).NE.0.OR.IB(9).NE.0) THEN
        WRITE(LU,*) 'THIS IS A PARTIAL OUTPUT FILE'
        WRITE(LU,*) 'MAYBE MEET GRETEL BEFORE...'
      ENDIF
      NPLAN = IB(7)
!
      IF (IB(10).EQ.1) THEN
        READ(NINP) DATE(1), DATE(2), DATE(3), TIME(1), TIME(2), TIME(3)
      ENDIF
!
      READ (NINP) NELEM,NPOIN,NDP,NDUM
      IF (NPLAN.GT.1) THEN
        NPOIN2 = NPOIN/NPLAN
        NELEM2 = NELEM/(NPLAN-1)
        IF (MOD(NPOIN,NPLAN).NE.0) THEN
          WRITE (LU,*) 'BUT NPOIN2 /= NPOIN3/NPLAN!'
          CALL PLANTE(1)
          STOP
        ENDIF
        IF (MOD(NELEM,(NPLAN-1)).NE.0) THEN
          WRITE (LU,*) 'BUT NELEM2 /= NELEM3/NPLAN!'
          CALL PLANTE(1)
          STOP
        ENDIF
      ELSE
        NPOIN2 = NPOIN
        NELEM2 = NELEM
      ENDIF
!
      IF (NDP.EQ.3) THEN
!         WRITE(LU,*) 'THE INPUT FILE ASSUMED TO BE 2D SELAFIN'
      ELSEIF (NDP.EQ.6) THEN
!         WRITE(LU,*) 'THE INPUT FILE ASSUMED TO BE 3D SELAFIN'
      ELSE
!         WRITE(LU,*) 'THE ELEMENTS ARE NEITHER TRIANGLES NOR PRISMS!'
!         WRITE(LU,*) 'NDP = ',NDP
        CALL PLANTE(1)
        STOP
      ENDIF
!
! NOW LET US ALLOCATE
!
      ALLOCATE (IKLES(NELEM2*3),STAT=ERR)
      CALL CHECK_ALLOCATE (ERR, 'IKLES')
      IF(NPLAN.GT.1) THEN
        ALLOCATE (IKLES3D(NELEM*NDP),STAT=ERR)
        CALL CHECK_ALLOCATE (ERR, 'IKLES3D')
      ENDIF
      ALLOCATE (IRAND(NPOIN),STAT=ERR)
      CALL CHECK_ALLOCATE (ERR, 'IRAND')
!   NVAR+2 : FIRST TWO FUNCTIONS ARE X AND Y
!   NPOIN IS 3D HERE IN 3D
      ALLOCATE (F(NPOIN,NVAR+2),STAT=ERR)
      CALL CHECK_ALLOCATE (ERR, 'IRAND')
!
! CONNECTIVITY TABLE:
!
      IF(NPLAN.EQ.0) THEN
        READ(NINP) ((IKLES((K-1)*NDP+J),J=1,NDP),K=1,NELEM)
      ELSE
        READ(NINP) ((IKLES3D((K-1)*NDP+J),J=1,NDP),K=1,NELEM)
        DO J=1,3
          DO K=1,NELEM2
            IKLES((K-1)*3+J)=IKLES3D((K-1)*6+J)
          ENDDO
        ENDDO
      ENDIF
!
      READ(NINP) (IRAND(J),J=1,NPOIN)
      READ(NINP) (F(J,1),J=1,NPOIN)
      READ(NINP) (F(J,2),J=1,NPOIN)
!
      ILOOP = 0
!      DO
!
!  READ THE TIME STEP
!
      READ(NINP) TIMES
      ILOOP = ILOOP + 1
!
! READ THE TIME VARIABLES; NO 1 AND 2 ARE X,Y
!
      DO K=3,NVAR+2
        READ(NINP) (F(J,K), J=1,NPOIN)
      END DO
!     END DO
!     STOP
      CLOSE (NINP)
!
      ALLOCATE (EPART(NELEM2),STAT=ERR)
      CALL CHECK_ALLOCATE (ERR, 'EPART')
      ALLOCATE (NPART(NPOIN2),STAT=ERR)
      CALL CHECK_ALLOCATE (ERR, 'NPART')
      !WRITE(*,*) NELEM2,NPOIN2,NPARTS
!
      CALL PARTITIONER(1, NELEM2, NPOIN, 3, NPARTS, IKLES, EPART, NPART)
!
      OPEN(UNIT=256,FILE='RESULT_SEQ_METIS')
      DO I=1,NELEM2
        WRITE(256,*) EPART(I)
      END DO

      !WRITE(*,*) 'END OF THE PRELIMINARY PART OF PARTEL'
!
      END PROGRAM PARTEL_PRELIM
